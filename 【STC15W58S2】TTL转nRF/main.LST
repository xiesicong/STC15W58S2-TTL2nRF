C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(D:\Keil_v5\C51\INC\STC) DEBUG OBJ
                    -ECTEXTEND

line level    source

   1          /**********************************************************/
   2          /* 名   称：NRF24L01+无线USB通信模块程序                  */
   3          /* 功   能：发送接收测试程序                              */
   4          /*          格式：首位是个数，后面跟要发送的数据          */ 
   5          /*                例如：发送5个字节 11 22 33 44 55(16进制)*/
   6          /*                电脑串口发送：1122334455                */
   7          /*                模块实际发送：051122334455              */     
   8          /* 作者：BQDZ     （论坛：http://bqdz.taobao.com）        */
   9          /* 联系方式： QQ :851968194     旺旺：王亚坤2864          */
  10          /*           手机：15821472722（上海）                    */
  11          /**********************************************************/
  12          #include        "STC15.H"
  13          #include        "uart.h"
  14          #include<intrins.h>
  15          #define uchar unsigned char
  16          #define uint  unsigned int
  17          
  18          /**********  NRF24L01寄存器操作命令  ***********/
  19          #define READ_REG        0x00  //读配置寄存器,低5位为寄存器地址
  20          #define WRITE_REG       0x20  //写配置寄存器,低5位为寄存器地址
  21          #define RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
  22          #define WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
  23          #define FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
  24          #define FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
  25          #define REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
  26          #define NOP             0xFF  //空操作,可以用来读状态寄存器      
  27          /**********  NRF24L01寄存器地址   *************/
  28          #define CONFIG          0x00  //配置寄存器地址                             
  29          #define EN_AA           0x01  //使能自动应答功能 
  30          #define EN_RXADDR       0x02  //接收地址允许
  31          #define SETUP_AW        0x03  //设置地址宽度(所有数据通道)
  32          #define SETUP_RETR      0x04  //建立自动重发
  33          #define RF_CH           0x05  //RF通道
  34          #define RF_SETUP        0x06  //RF寄存器
  35          #define STATUS          0x07  //状态寄存器
  36          #define OBSERVE_TX      0x08  // 发送检测寄存器
  37          #define CD              0x09  // 载波检测寄存器
  38          #define RX_ADDR_P0      0x0A  // 数据通道0接收地址
  39          #define RX_ADDR_P1      0x0B  // 数据通道1接收地址
  40          #define RX_ADDR_P2      0x0C  // 数据通道2接收地址
  41          #define RX_ADDR_P3      0x0D  // 数据通道3接收地址
  42          #define RX_ADDR_P4      0x0E  // 数据通道4接收地址
  43          #define RX_ADDR_P5      0x0F  // 数据通道5接收地址
  44          #define TX_ADDR         0x10  // 发送地址寄存器
  45          #define RX_PW_P0        0x11  // 接收数据通道0有效数据宽度(1~32字节) 
  46          #define RX_PW_P1        0x12  // 接收数据通道1有效数据宽度(1~32字节) 
  47          #define RX_PW_P2        0x13  // 接收数据通道2有效数据宽度(1~32字节) 
  48          #define RX_PW_P3        0x14  // 接收数据通道3有效数据宽度(1~32字节) 
  49          #define RX_PW_P4        0x15  // 接收数据通道4有效数据宽度(1~32字节)
  50          #define RX_PW_P5        0x16  // 接收数据通道5有效数据宽度(1~32字节)
  51          #define FIFO_STATUS     0x17  // FIFO状态寄存器
  52          /*――――――――――――――――――――――――――――――――――――――――――――――――――――
             -――――――――――――――――*/
  53          
C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 2   

  54          /******   STATUS寄存器bit位定义      *******/
  55          #define MAX_TX          0x10      //达到最大发送次数中断
  56          #define TX_OK           0x20      //TX发送完成中断
  57          #define RX_OK           0x40      //接收到数据中断
  58          /*――――――――――――――――――――――――――――――――――――――――――――――――――*/
  59          
  60          /*********     24L01发送接收数据宽度定义          ***********/
  61          #define TX_ADR_WIDTH    5     //5字节地址宽度
  62          #define RX_ADR_WIDTH    5     //5字节地址宽度
  63          #define TX_PLOAD_WIDTH  32    //32字节有效数据宽度
  64          #define RX_PLOAD_WIDTH  32    //32字节有效数据宽度
  65          
  66          const uchar TX_ADDRESS[TX_ADR_WIDTH]={0xFF,0xFF,0xFF,0xFF,0xFF}; //发送地址
  67          const uchar RX_ADDRESS[RX_ADR_WIDTH]={0xFF,0xFF,0xFF,0xFF,0xFF}; //接收地址
  68          
  69          sbit NRF_IRQ  = P3^3;
  70          sbit NRF_MISO = P1^4;
  71          sbit NRF_MOSI = P1^3;
  72          sbit NRF_SCK  = P1^5;
  73          sbit NRF_CSN  = P1^2;
  74          sbit NRF_CE   = P3^4;
  75          
  76          sbit LED_LINK=P5^1;
  77          sbit LED=P5^2;
  78          
  79          sbit S1=P2^0;
  80          sbit S2=P2^1;
  81          sbit S3=P2^2;
  82          sbit S4=P2^3;
  83          
  84          
  85          uchar rece_buf[32];             //nrf接收缓存
  86          uchar rec_buf[32];              //串口接收缓存
  87          uchar i=0,j;
  88          
  89          
  90          
  91          void delay_us(uchar num)
  92          {
  93   1              uchar i; 
  94   1              for(i=0;i<num;i++)
  95   1              _nop_();
  96   1      }
  97          void delay_150us()
  98          {
  99   1              uint i;
 100   1              for(i=0;i<1500;i++);
 101   1      }
 102          void delay(uint t)
 103          {
 104   1              uchar k;
 105   1              while(t--)
 106   1              for(k=0;k<200;k++);
 107   1      }
 108          /***************************************************************/
 109          //最基本的函数，完成 GPIO 模拟 SPI 的功能。
 110          //将输出字节（MOSI）从 MSB 循环输出，
 111          //同时将输入字节（MISO）从 LSB 循环移入。
 112          //上升沿读入，下降沿输出。
 113          //（从 SCK 被初始化为低电平可以判断出）
 114          /*******************************************************************/
 115          uchar SPI_RW(uchar byte)
C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 3   

 116          {
 117   1              uchar bit_ctr;
 118   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++)  // 输出8位
 119   1              {
 120   2                      NRF_MOSI=(byte&0x80);                   // MSB TO MOSI
 121   2                      byte=(byte<<1);                                 // shift next bit to MSB
 122   2                      NRF_SCK=1;                                              //SCK是时钟
 123   2                      byte|=NRF_MISO;                         // capture current MISO bit
 124   2                      NRF_SCK=0;
 125   2              }
 126   1              return byte;
 127   1      }
 128          
 129          /*********************************************/
 130          /* 函数功能：给24L01的寄存器写值（一个字节） */
 131          /* 入口参数：reg   要写的寄存器地址          */
 132          /*           value 给寄存器写的值            */
 133          /* 出口参数：status 状态值                   */
 134          /*********************************************/
 135          uchar NRF24L01_Write_Reg(uchar reg,uchar value)
 136          {
 137   1              uchar status;
 138   1      
 139   1              NRF_CSN=0;                  //CSN=0; 片选信号，低电平有效  
 140   1              status = SPI_RW(reg);           //发送寄存器地址,并读取状态值
 141   1              SPI_RW(value);                          //给寄存器写的值
 142   1              NRF_CSN=1;                  //CSN=1;
 143   1      
 144   1              return status;
 145   1      }
 146          /*************************************************/
 147          /* 函数功能：读24L01的寄存器值 （一个字节）      */
 148          /* 入口参数：reg  要读的寄存器地址               */
 149          /* 出口参数：value 读出寄存器的值                */
 150          /*************************************************/
 151          uchar NRF24L01_Read_Reg(uchar reg)
 152          {
 153   1              uchar value;
 154   1      
 155   1              NRF_CSN=0;              //CSN=0;片选信号，低电平有效   
 156   1              SPI_RW(reg);                    //发送寄存器值(位置),并读取状态值
 157   1              value = SPI_RW(NOP);
 158   1              NRF_CSN=1;              //CSN=1;
 159   1      
 160   1              return value;
 161   1      }
 162          /*********************************************/
 163          /* 函数功能：读24L01的寄存器值（多个字节）   */
 164          /* 入口参数：reg   寄存器地址                */
 165          /*           *pBuf 读出寄存器值的存放数组    */
 166          /*           len   数组字节长度              */
 167          /* 出口参数：status 状态值                   */
 168          /*********************************************/
 169          uchar NRF24L01_Read_Buf(uchar reg,uchar *pBuf,uchar len)
 170          {
 171   1              uchar status,u8_ctr;
 172   1              NRF_CSN=0;                      //CSN=0       
 173   1              status=SPI_RW(reg);                             //发送寄存器地址,并读取状态值              
 174   1              for(u8_ctr=0;u8_ctr<len;u8_ctr++)
 175   1              pBuf[u8_ctr]=SPI_RW(0XFF);              //读出数据
 176   1              NRF_CSN=1;                              //CSN=1
 177   1              return status;                          //返回读到的状态值
C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 4   

 178   1      }
 179          /**********************************************/
 180          /* 函数功能：给24L01的寄存器写值（多个字节）  */
 181          /* 入口参数：reg  要写的寄存器地址            */
 182          /*           *pBuf 值的存放数组               */
 183          /*           len   数组字节长度               */
 184          /**********************************************/
 185          uchar NRF24L01_Write_Buf(uchar reg, uchar *pBuf, uchar len)
 186          {
 187   1              uchar status,u8_ctr;
 188   1              NRF_CSN=0;
 189   1              status = SPI_RW(reg);                   //发送寄存器值(位置),并读取状态值
 190   1              for(u8_ctr=0; u8_ctr<len; u8_ctr++)
 191   1              SPI_RW(*pBuf++);                                //写入数据
 192   1              NRF_CSN=1;
 193   1              return status;                          //返回读到的状态值
 194   1      }                                                                                                  
 195          
 196          /*********************************************/
 197          /* 函数功能：24L01接收数据                   */
 198          /* 入口参数：rxbuf 接收数据数组              */
 199          /* 返回值： 0   成功收到数据                 */
 200          /*          1   没有收到数据                 */
 201          /*********************************************/
 202          uchar NRF24L01_RxPacket(uchar *rxbuf)
 203          {
 204   1              uchar state;
 205   1               
 206   1              state=NRF24L01_Read_Reg(STATUS);                        //读取状态寄存器的值             
 207   1              NRF24L01_Write_Reg(WRITE_REG+STATUS,state); //清除TX_DS或MAX_RT中断标志，把state（返回的状态值）写入到WRI
             -TE_REG+STATUS地址的寄存器里
 208   1              if(state&RX_OK)                                                         //接收到数据
 209   1              {
 210   2                      NRF_CE = 0;
 211   2                      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据,在寄存器RD_RX_PLOAD里读取RX_PLOAD_WIDTH长
             -度的数据放到rxbuf
 212   2                      NRF24L01_Write_Reg(FLUSH_RX,0xff);                                      //清除RX FIFO寄存器，把0xff（空值）写入到FLUSH_RX地址的寄存器里
 213   2                      
 214   2                      NRF_CE = 1;
 215   2                      delay_150us(); 
 216   2                      return 0; 
 217   2              }          
 218   1              return 1;//没收到任何数据
 219   1      }
 220          /**********************************************/
 221          /* 函数功能：设置24L01为发送模式              */
 222          /* 入口参数：txbuf  发送数据数组              */
 223          /* 返回值； 0x10    达到最大重发次数，发送失败*/
 224          /*          0x20    成功发送完成              */
 225          /*          0xff    发送失败                  */
 226          /**********************************************/
 227          uchar NRF24L01_TxPacket(uchar *txbuf)
 228          {
 229   1              uchar state;
 230   1         
 231   1              NRF_CE=0;                                                                                               //CE拉低，使能24L01配置
 232   1              NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);   //写数据到TX BUF  32个字节，写入长度为TX_PLOAD_WI
             -DTH的数据txbuf到寄存器WR_TX_PLOAD中
 233   1              NRF_CE=1;                                                                                               //CE置高，使能发送         
 234   1              while(NRF_IRQ==1);                                                                              //等待发送完成
 235   1              state=NRF24L01_Read_Reg(STATUS);                                                //读取状态寄存器的值       
 236   1              NRF24L01_Write_Reg(WRITE_REG+STATUS,state);                     //清除TX_DS或MAX_RT中断标志，把state（返回的状态值）写入到
C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 5   

             -WRITE_REG+STATUS地址的寄存器里
 237   1              if(state&MAX_TX)                                                                                //达到最大重发次数
 238   1              {
 239   2                      NRF24L01_Write_Reg(FLUSH_TX,0xff);                                      //清除TX FIFO寄存器，把0xff（空值）写入到FLUSH_RX地址的寄存器里 
 240   2                      return MAX_TX; 
 241   2              }
 242   1              if(state&TX_OK)                                                                                 //发送完成
 243   1              {
 244   2                      return TX_OK;
 245   2              }
 246   1              return 0xff;                                                                                    //发送失败
 247   1      }
 248          
 249          /********************************************/
 250          /* 函数功能：检测24L01是否存在              */
 251          /* 返回值；  0  存在                        */
 252          /*           1  不存在                      */
 253          /********************************************/    
 254          uchar NRF24L01_Check(void)
 255          {
 256   1              uchar check_in_buf[5]={0x11,0x22,0x33,0x44,0x55};
 257   1              uchar check_out_buf[5]={0x00};
 258   1      
 259   1              NRF_SCK=0;              //这里有点不懂
 260   1              NRF_CSN=1;    
 261   1              NRF_CE=0;
 262   1      
 263   1              NRF24L01_Write_Buf(WRITE_REG+TX_ADDR, check_in_buf, 5);
 264   1      
 265   1              NRF24L01_Read_Buf(READ_REG+TX_ADDR, check_out_buf, 5);
 266   1      
 267   1              if((check_out_buf[0] == 0x11)&&\
 268   1                 (check_out_buf[1] == 0x22)&&\
 269   1                 (check_out_buf[2] == 0x33)&&\
 270   1                 (check_out_buf[3] == 0x44)&&\
 271   1                 (check_out_buf[4] == 0x55))return 0;
 272   1              else return 1;
 273   1      }                       
 274          
 275          
 276          void NRF24L01_RT_Init(void)                     /*这里有很多寄存器参数功能，见NRF24L01_中文.pdf第15页左右*/
 277          {       
 278   1              NRF_CE=0;                 
 279   1              NRF24L01_Write_Reg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 280   1              NRF24L01_Write_Reg(FLUSH_RX,0xff);                                      //清除RX FIFO寄存器    
 281   1              NRF24L01_Write_Buf(WRITE_REG+TX_ADDR,(uchar*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 
 282   1              NRF24L01_Write_Buf(WRITE_REG+RX_ADDR_P0,(uchar*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能
             -ACK          
 283   1              NRF24L01_Write_Reg(WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答             15页
 284   1              NRF24L01_Write_Reg(WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址             15页
 285   1              NRF24L01_Write_Reg(WRITE_REG+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
             -           16页
 286   1              NRF24L01_Write_Reg(WRITE_REG+RF_CH,0);        //设置RF通道为2.400GHz  频率=2.4+0GHz
 287   1              NRF24L01_Write_Reg(WRITE_REG+RF_SETUP,0x0F);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 288   1              NRF24L01_Write_Reg(WRITE_REG+CONFIG,0x0f);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式
             -,开启所有中断
 289   1              NRF_CE=1;                                                                         //CE置高，使能发送
 290   1      }
 291          
 292          void SEND_BUF(uchar *buf)
 293          {
 294   1              NRF_CE=0;
C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 6   

 295   1              NRF24L01_Write_Reg(WRITE_REG+CONFIG,0x0e);              //0x0e为发射模式
 296   1              NRF_CE=1;
 297   1      
 298   1              delay_us(150);
 299   1              NRF24L01_TxPacket(buf);
 300   1      
 301   1              NRF_CE=0;
 302   1              NRF24L01_Write_Reg(WRITE_REG+CONFIG, 0x0f);             //0x0f为接收模式
 303   1              NRF_CE=1;       
 304   1      }
 305          void main()
 306          {
 307   1              while(NRF24L01_Check()); // 等待检测到NRF24L01，程序才会向下执行
 308   1              NRF24L01_RT_Init();              //初始化函数   
 309   1              UartInit();
 310   1              
 311   1              LED_LINK=0;
 312   1              
 313   1              P2M0 = 0x00;            //P2全部设置为准双向口，内部有弱上拉
 314   1              P2M1 = 0x00;
 315   1              
 316   1              while(1)
 317   1              {
 318   2                      if(NRF_IRQ==0)          // 如果无线模块接收到数据
 319   2                      {               
 320   3                              if(NRF24L01_RxPacket(rece_buf)==0)
 321   3                              {       
 322   4                                      if(     rece_buf[1]=='1')                       //第1位以后是收到的命令数据，rece_buf[0]是数据位数长度
 323   4                                              LED=0;
 324   4                                      if(     rece_buf[1]=='2')                       //第1位以后是收到的命令数据，rece_buf[0]是数据位数长度
 325   4                                              LED=1;
 326   4                                      
 327   4                                      j = rece_buf[0];
 328   4                                      for(i=0;i<=j;i++)
 329   4                                      {
 330   5                                              rece_buf[i] = rece_buf[i+1];
 331   5                                      }
 332   4                                      SendString(rece_buf);
 333   4                                      
 334   4                                                      
 335   4                              }
 336   3                      }
 337   2                      
 338   2                      if(S1==0)                                       
 339   2                      {
 340   3                              delay_us(10);                                           
 341   3                              if(S1==0)                                                               
 342   3                              {
 343   4                                      rece_buf[1]=0x53;                                       //S
 344   4                                      rece_buf[2]=0x31;                                       //1
 345   4              
 346   4                                      rece_buf[0]=2;                                          //一共要发送2个字节，rece_buf[0]必须是2！！！！！！
 347   4                                      SEND_BUF(rece_buf);
 348   4                                      while(!S1);
 349   4                              }       
 350   3                      }
 351   2                      if(S2==0)                                                       
 352   2                      {
 353   3                              delay_us(10);                                           
 354   3                              if(S2==0)                                                               
 355   3                              {
 356   4                                      rece_buf[1]=0x53;                                       //S
C51 COMPILER V9.60.0.0   MAIN                                                              05/13/2020 16:24:55 PAGE 7   

 357   4                                      rece_buf[2]=0x32;                                       //2
 358   4      
 359   4                                      rece_buf[0]=2;                                          //一共要发送2个字节，rece_buf[0]必须是2！！！！！！
 360   4                                      SEND_BUF(rece_buf);
 361   4                                      while(!S2);
 362   4                              }       
 363   3                      }
 364   2                      if(S3==0)                                               
 365   2                      {
 366   3                              delay_us(10);                                           
 367   3                              if(S3==0)                                                               
 368   3                              {
 369   4                                      rece_buf[1]=0x53;                                       //S
 370   4                                      rece_buf[2]=0x33;                                       //3
 371   4      
 372   4                                      rece_buf[0]=2;                                          //一共要发送2个字节，rece_buf[0]必须是2！！！！！！
 373   4                                      SEND_BUF(rece_buf);
 374   4                                      while(!S3);
 375   4                              }       
 376   3                      }
 377   2                      if(S4==0)                                                       
 378   2                      {
 379   3                              delay_us(10);                                   
 380   3                              if(S4==0)                                                               
 381   3                              {
 382   4                                      rece_buf[1]=0x53;                                       //S
 383   4                                      rece_buf[2]=0x34;                                       //4
 384   4                                      
 385   4                                      rece_buf[0]=2;                                          //一共要发送2个字节，rece_buf[0]必须是2！！！！！！
 386   4                                      SEND_BUF(rece_buf);
 387   4                                      while(!S4);
 388   4                              }       
 389   3                      }
 390   2              }
 391   1      }
 392          
 393          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    732    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     76      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
